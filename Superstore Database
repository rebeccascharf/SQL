#This project utilizes the following Superstore data: 

CREATE TABLE superstore (
    item_id INTEGER PRIMARY KEY,
    item_name TEXT,
    category TEXT,
    price DECIMAL(10, 2),
    stock_quantity INTEGER,
    average_rating DECIMAL(3, 2)
);

INSERT INTO superstore (item_id, item_name, category, price, stock_quantity, average_rating)
VALUES
    (1, 'Stainless Steel Cookware Set', 'Kitchen Supplies', 89.99, 50, 4.6),
    (2, 'Memory Foam Mattress', 'Furnishings', 499.99, 30, 4.8),
    (3, 'Smart LED TV', 'Electronics', 549.00, 20, 4.5),
    (4, 'Robot Vacuum Cleaner', 'Appliances', 199.50, 40, 4.3),
    (5, 'Wireless Bluetooth Speaker', 'Electronics', 39.99, 60, 4.2),
    (6, 'Non-Stick Baking Set', 'Kitchen Supplies', 29.95, 80, 4.4),
    (7, 'Cotton Bedding Set', 'Furnishings', 89.00, 25, 4.7),
    (8, 'Smart Home Security Camera', 'Electronics', 79.95, 15, 4.1),
    (9, 'Air Purifier', 'Appliances', 129.50, 35, 4.6),
    (10, 'Premium Coffee Maker', 'Kitchen Supplies', 79.99, 50, 4.9),
    (11, 'Ergonomic Office Chair', 'Furnishings', 189.00, 20, 4.5),
    (12, 'Wireless Earbuds', 'Electronics', 49.99, 75, 4.3),
    (13, 'Slow Cooker', 'Appliances', 49.95, 30, 4.7),
    (14, 'Cutlery Set', 'Kitchen Supplies', 34.50, 40, 4.4),
    (15, 'Cozy Throw Blanket', 'Furnishings', 24.99, 100, 4.2);

#For this project, I used SQL to query the Superstore database to get information about items sold at the store and their prices.

#Use a SELECT statement to order the items by price.
SELECT *
FROM superstore
ORDER BY price;

#Show a statistic about the item prices.
SELECT SUM(price), item_name
FROM superstore
GROUP BY item_name
ORDER BY price DESC;

#Show a statistic about the price for items in the category of "Kitchen Supplies". 
SELECT item_name, MAX(price)
FROM superstore
WHERE category='Kitchen Supplies'
ORDER BY price DESC;

#Show how many air purifiers are in stock.
SELECT stock_quantity
FROM superstore
WHERE item_name='Air Purifier'

#Which item has the highest rating, and what is its category?

SELECT item_name, MAX(average_rating), category
FROM superstore;

#What is the total stock quantity for each category, ordered from highest to lowest?

SELECT category, SUM(stock_quantity) AS total_stock
FROM superstore
GROUP BY category
ORDER BY total_stock DESC;

#List all items that cost more than $100, ordered by price (highest → lowest).

SELECT item_id, item_name, category, price
FROM superstore
WHERE price > 100
ORDER BY price DESC;

#What is the average rating for items that cost less than $50?

SELECT AVG(average_rating) AS avg_rating_under_50
FROM superstore
WHERE price < 50;

#Show the item(s) with the lowest stock quantity in the entire store.

SELECT item_id, item_name, MIN(stock_quantity)
FROM superstore;

#How many items in the store have a rating of 4.5 or higher?

SELECT COUNT(*) AS items_rating_4_5_plus
FROM superstore
WHERE average_rating >= 4.5;

#What is the sum of stock quantities for the “Electronics” category?

SELECT SUM(stock_quantity) AS electronics_total_stock
FROM superstore
WHERE category = 'Electronics';

#Find the maximum price in each category.

SELECT category, MAX(price) AS max_price
FROM superstore
GROUP BY category
ORDER BY price DESC;

#What is the average price of items in the ‘Appliances’ category?

SELECT AVG(price) AS appliances_avg_price
FROM superstore
WHERE category = 'Appliances';

#List all items in the “Furnishings” category, ordered by rating (highest → lowest).

SELECT item_id, item_name, price, average_rating
FROM superstore
WHERE category = 'Furnishings'
ORDER BY average_rating DESC;

#What is the total potential stock value (price × stock_quantity) of all items in the store?

SELECT SUM(price * stock_quantity) AS total_inventory_value
FROM superstore;

#Show the minimum, maximum, and average rating for each category.

SELECT
  category,
  MIN(average_rating) AS min_rating,
  MAX(average_rating) AS max_rating,
  AVG(average_rating) AS avg_rating
FROM superstore
GROUP BY category
ORDER BY category;
